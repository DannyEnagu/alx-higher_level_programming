============================
How to us 7-base_geometry.py
============================

This module defines a ``BaseGeometry`` class.

Using ``BaseGeometry``
================

This is an example text file on how to use ``BaseGeometry``. 
``BaseGeometry`` is a class which contains two public instance
methods ``area()`` and ``integer_validator()``.

``area()`` takes in no argument and raises an exception.

``integer_validator(name, value)`` takes in two arguments.
``name`` is assumed to always by string argument.
if ``value`` is not an integer we raise a TypeError exception, 
with the message <name> must be an integer and 
if ``value`` is less or equal to 0 we raise a ValueError exception,
with the message <name> must be greater than 0.

How to use ``area()``
---------------------

>>> BG = __import__('7-base_geometry').BaseGeometry

Check for area():

   >>> b = BG()
   >>> b.area()
   Traceback (most recent call last):
   ...
   Exception: area() is not implemented

Checking too many arguments for area:

   >>> b.area(1)
   Traceback (most recent call last):
   ...
   TypeError: area() takes 1 positional argument but 2 were given


How to use ``integer_validator(name, value)``
---------------------------------------------

 we assume that name will always be of type string
so our test cases will only cover value which must be integer value.

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

check for correct values (int):

::

    >>> bg.integer_validator("my_int", 12)
    
::

check for value is equal to 0:

::

    >>> bg.integer_validator("name", 0)
    Traceback (most recent call last):
    ...
    ValueError: name must be greater than 0

::

check for values less than 0:

::

    >>> bg.integer_validator("name", -1)
    Traceback (most recent call last):
    ...
    ValueError: name must be greater than 0

::

check for other types of value (i.e string, float, list, etc)

::
    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

::

    >>> bg.integer_validator("name", 2.5)
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

::

    >>> bg.integer_validator("name", [1, 2, 3])
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

::

::

    >>> bg.integer_validator("name", (8, 9))
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

::

::

    >>> bg.integer_validator("name", {"key": "value"})
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

::

::

    >>> bg.integer_validator("name", {0, 1})
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

::

::

    >>> bg.integer_validator("name", complex(1, 1))
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

::

::

    >>> bg.integer_validator("name", True)
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

::

::

    >>> bg.integer_validator("name", frozenset([1, 2, 3]))
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

::

::

    >>> bg.integer_validator("name", bytearray(b"bytes"))
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

::


check for zero or no argument:

::

    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

::

check for only one argument:

::
    >>> bg.integer_validator("integer")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

::

::
    >>> bg.integer_validator(2)
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

::

check for more than 2 argument to integer_validator:

::

    >>> bg.integer_validator("integer", 1, 2)
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() takes 3 positional arguments but 4 were given

::
